
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
import asyncio
import requests

API_TOKEN = '8066927688:AAFipaqyM4qoUODZ705PDocSZSSEEGWCVik'
PUPPETEER_URL = 'https://foodbot-t75k.onrender.com/generate?query='

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

conn = sqlite3.connect("users.db")
c = conn.cursor()
c.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        phone TEXT,
        address TEXT
    )
""")
c.execute("""
    CREATE TABLE IF NOT EXISTS manual_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message TEXT
    )
""")
conn.commit()

main_menu = InlineKeyboardMarkup(row_width=1)
main_menu.add(
    InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∑–∞–∫–∞–∑", callback_data="random"),
    InlineKeyboardButton("üçΩ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–±–æ", callback_data="settings"),
    InlineKeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual"),
)

class UserData(StatesGroup):
    name = State()
    phone = State()
    address = State()

class ManualInput(StatesGroup):
    request = State()

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –µ–¥—É.", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data == 'settings')
async def process_settings(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    await UserData.name.set()

@dp.message_handler(state=UserData.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await UserData.next()

@dp.message_handler(state=UserData.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await UserData.next()

@dp.message_handler(state=UserData.address)
async def process_address(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id

    c.execute("REPLACE INTO users (user_id, name, phone, address) VALUES (?, ?, ?, ?)",
              (user_id, user_data['name'], user_data['phone'], message.text))
    conn.commit()

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=main_menu)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'manual')
async def manual_entry(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="‚úç –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—è—Ç–µ—Ä–æ—á–∫–∞ –ª–∞–ø—à–∞ —Å–æ—Å–∏—Å–∫–∏ –º–∞–π–æ–Ω–µ–∑ 700—Ä):"
    )
    await ManualInput.request.set()

@dp.message_handler(state=ManualInput.request)
async def process_manual_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    c.execute("INSERT INTO manual_requests (user_id, message) VALUES (?, ?)", (user_id, text))
    conn.commit()

    try:
        response = requests.get(PUPPETEER_URL + text)
        if response.status_code == 200:
            result = response.text
        else:
            result = "‚ö† –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer."
    except Exception as e:
        result = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}"

    await message.answer(f"üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: \n{text}\n\nüì¶ –û—Ç–≤–µ—Ç: \n{result}", reply_markup=main_menu)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'random')
async def dummy_handler(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é..."
    )
    await asyncio.sleep(2)
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
